```python
import serial
import time
import logging

# Configurează logger
logging.basicConfig(
    filename="../logs/test_serial.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("test_serial")

def test_arduino_connection(port="/dev/ttyACM0", baudrate=115200, timeout=1):
    try:
        # Inițializează conexiunea serială
        ser = serial.Serial(port, baudrate, timeout=timeout)
        logger.info(f"Conectat la {port} cu baud rate {baudrate}")
        time.sleep(2)  # Așteaptă stabilizarea conexiunii

        # Trimite o comandă simplă
        command = "<0,2,100,100,0,0>"  # SET_PWM
        ser.write(command.encode('utf-8'))
        ser.flush()
        logger.info(f"Trimis: {command}")

        # Citește răspunsul
        response = ser.readline().decode('utf-8').strip()
        if response:
            logger.info(f"Răspuns primit: {response}")
        else:
            logger.error("Niciun răspuns de la Arduino")

        ser.close()
        logger.info("Conexiune închisă")
    except Exception as e:
        logger.error(f"Eroare: {e}")

if __name__ == "__main__":
    test_arduino_connection()


#define CMD_ACK 0
#define ERROR_BAD_MSG 1
#define ERROR_INVALID_CMD 2
#define COMMAND_MAX_VALUE 6

void setup() {
    Serial.begin(115200);
    Serial.println("Arduino started");
}

void loop() {
    if (Serial.available()) {
        String input = Serial.readStringUntil('>');
        if (input.startsWith("<")) {
            input = input.substring(1);
            Serial.print("Received: ");
            Serial.println(input);
            int values[6];
            int index = 0;
            char *token = strtok(input.c_str(), ",");
            while (token != NULL && index < 6) {
                values[index++] = atoi(token);
                token = strtok(NULL, ",");
            }
            if (index < 2) {
                Serial.println("Error: Bad message");
                Serial.print("<");
                Serial.print(values[0]);
                Serial.print(",");
                Serial.print(ERROR_BAD_MSG);
                Serial.println(">");
            } else if (values[1] > COMMAND_MAX_VALUE) {
                Serial.println("Error: Invalid command");
                Serial.print("<");
                Serial.print(values[0]);
                Serial.print(",");
                Serial.print(ERROR_INVALID_CMD);
                Serial.println(">");
            } else {
                Serial.print("<");
                Serial.print(values[0]);
                Serial.print(",");
                Serial.print(CMD_ACK);
                Serial.println(">");
                Serial.println("Sent ACK");
            }
        }
    }
}
```
